@startuml Packet

namespace Packet {
	abstract class AbstractPacket {
		+{static} pktMapping: Record<string, Class>;
		+{static} PKT_CONSTANT_NAME: string
		+serial: number
		+payload: any
		+{static} mapClass(name: string, value: Class): void
		+{static} getClass(name: string): Class
		+{static} isSensitive(clazz: Class): boolean
		+freeze(keys?: (keyof this)[]): this
	}

	class PacketGateway {
		-handlers: Array<TrafficHandler>
		+onPackets(rawData: any, client: Socket): void
		+handleDisconnect(client: Socket): void
		-pktShouldQuickAbort(pkt: AbstractPacket, socket: Socket): boolean
		-extractPktName(data: any): string | null
	}

	class PacketService {
		-connectedSockets: Record<string, Socket>
		+sendPacket(pkt: ServerPacket, socket: Socket): void
		+getConnectedSockets(): Record<string, Socket>
		+getOnlinePlayer(socketId: string): OnlinePlayer
		+addOnlinePlayer(socketId: string, player: OnlinePlayer): void
		+removeOnlinePlayer(socketId: string): void
		+isConnectedSocket(socketId: string): boolean
		+broadcast(pkt: ServerPacket): void
		-formPktName(data: any, pkt: ServerPacket): any
	}

	namespace Client {
		abstract class ClientPacket extends .Packet.AbstractPacket {
			#identity: string
			+validate(): boolean
			+extractHead(data: any): ClientPacket;
			+{abstract} extractPayload(): ClientPacket;
		}

		namespace Net {
			class CNetPacket extends .Packet.Client.ClientPacket {}

			class CNetLoginPacket extends CNetPacket {
				-account: string
				-name: string
				+constructor(account: string, name: string)
				+getAccount(): string
				+getName(): string
				+extractPayload(): CNetLoginPacket
			}

			class CNetLogoutPacket extends CNetPacket {
				+extractPayload(): CNetLogoutPacket
			}
		}

		namespace Player {
			class CPlayerPacket extends .Packet.Client.ClientPacket {}

			class CPlayerChatPacket extends CPlayerPacket {
				-message: string
				+getMessage(): string
				+extractPayload(): CPlayerChatPacket
			}
		}
	}

	namespace Server {
		abstract class ServerPacket extends .Packet.AbstractPacket {
			+formHead(): any
			+{abstract} formPayload(): ServerPacket
		}

		namespace Net {
			class SNetListPacket extends .Packet.Server.ServerPacket {
				-list: Record<string, OnlinePlayer>
				+constructor(list: Record<string, OnlinePlayer>)
				+formPayload(): ServerPacket
			}

			class SNetLoginPacket extends .Packet.Server.ServerPacket {
				-isSuccess: boolean
				-uuid: string
				- identity: string
				+constructor(isSuccess: boolean, uuid: string, identity: string)
				+formPayload(): ServerPacket
			}
		}

		namespace Player {
			class SPlayerChatPacket extends .Packet.Server.ServerPacket {
				-from: string
				-message: string
				+constructor(from: string, message: string)
				+formPayload(): ServerPacket
			}
		}
	}

	namespace Handler {
		interface TrafficHandler {
			+canHandle(pkt: AbstractPacket): boolean
			+handle(packet: AbstractPacket, socket: Socket): void
		}

		namespace Net {
			class NetPacketHandler implements .Packet.Handler.TrafficHandler {
				constructor(\n\
	loginPacketHandler LoginPacketHandler,\n\
	logoutPachetHandler LogoutPachetHandler,
	)
			}

			class LoginPacketHandler implements .Packet.Handler.TrafficHandler {
				constructor(\n\
	packetService: PacketService,\n\
	)
			}

			class LogoutPacketHandler implements .Packet.Handler.TrafficHandler {
			constructor(packetService: PacketService)
			}
		}

		namespace Player {
			class PlayerPacketHandler implements .Packet.Handler.TrafficHandler {
				constructor(chatPacketHandler: ChatPacketHandler)
			}

			class ChatPacketHandler implements .Packet.Handler.TrafficHandler {
				constructor(packetService: PacketService)
			}
		}
	}
}

@enduml
